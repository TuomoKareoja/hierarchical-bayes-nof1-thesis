=>PYTHONTEX#py#default#defaultverb#0#verbatim#####1595#
import pymc3 as pm
import pandas as pd

measurements_df = pd.read_csv("patient_measurements.csv")

with pm.Model() as single_patient_no_trend_model:

    # separate priors for each treatment
    treatment1_prior = pm.Normal("treatment1", mu=10, sigma=10)
    treatment2_prior = pm.Normal("treatment2", mu=10, sigma=10)
    trend_prior = pm.Normal("trend", mu=0.1, sigma=0.3)
    # common variance parameter defining the error
    gamma_prior = pm.HalfCauchy("gamma", beta=10)

    # means are created from both priors, with a indicator setting the
    # values to 0 if the particular treatment is not applied at the observation
    # adding in the effect of the trend at the particular observation
    measurement_means = (
        treatment1_prior * measurements_df[patient_idx == 0]["treatment1_idx"]
        + treatment2_prior * measurements_df[patient_idx == 0]["treatment2_idx"]
        + trend_prior * measurements_df[patient_idx == 0]["measurement_idx"]
    )

    # likelihood is normal distribution with the same amount of dimensions
    # as the patient has measurements and and the mean is defined by one of the
    # treatment priors + trend at that that measurement with always the same variance
    likelihood = pm.Normal(
        "y",
        measurement_means,
        sigma=gamma_prior,
        observed=measurements_df[patient_idx == 0]["value"],
    )

    # adding the comparison between the treatments
    difference = pm.Deterministic('difference', treatment1_prior - treatment2_prior)

    # running the model
    trace = pm.sample(800, tune=500, cores=3)

    # Checking diagnostic describing how the MCMC method performed
    pm.traceplot(trace, ["treatment1", "treatment2", "trend", "gamma"])
    plt.show()
    pm.summary(trace)

    # checking the posterior distributions
    pm.plot_posterior(trace)
    plt.show()


# posterior sampling
with single_patient_no_trend_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df[patient == 0],
    parameters_df=parameters_df[parameters_df["patient_idx"] == 0],
)
=>PYTHONTEX#py#default#defaultverb#1#verbatim#####1660#
import pymc3 as pm
import pandas

measurements_df = pd.read_csv("patient_measurements.csv")
=>PYTHONTEX#py#default#default#0#code#####1672#
import os
import pandas as pd

measurements_path = os.path.join("..", "data", "patient_measurements.csv")
measurements_df = pd.read_csv(measurements_path)
measurements_df.columns = ['patient', 'measurement', 'period', 'block',
'treatement1', 'treatment2', 'value']
print(measurements_df.head(10).to_latex(index=False))
=>PYTHONTEX#py#default#defaultverb#2#verbatim#####1696#
with pm.Model() as single_patient_no_trend_model:
=>PYTHONTEX#py#default#defaultverb#3#verbatim#####1710#
treatment1_prior = pm.Normal("treatment1", mu=10, sigma=10)
treatment2_prior = pm.Normal("treatment2", mu=10, sigma=10)
trend_prior = pm.Normal("trend", mu=0.1, sigma=0.3)
gamma_prior = pm.HalfCauchy("gamma", beta=10)
=>PYTHONTEX#py#default#defaultverb#4#verbatim#####1735#
measurement_means = (
    treatment1_prior
    * measurements_df[patient == 0]["treatment1"]
    + treatment2_prior
    * measurements_df[patient == 0]["treatment2"]
    + trend_prior
    * measurements_df[patient == 0]["measurement"]
)

likelihood = pm.Normal(
    "y",
    measurement_means,
    sigma=gamma_prior,
    observed=measurements_df[patient == 0]["value"],
)
=>PYTHONTEX#py#default#defaultverb#5#verbatim#####1778#
    difference = pm.Deterministic('difference', treatment1_prior - treatment2_prior)
=>PYTHONTEX#py#default#defaultverb#6#verbatim#####1799#
trace = pm.sample(draw=800, tune=500, cores=3)
=>PYTHONTEX#py#default#defaultverb#7#verbatim#####1851#
# Checking diagnostic describing how the MCMC method performed
pm.traceplot(trace, ["treatment1", "treatment2", "trend", "gamma"])
plt.show()
pm.summary(trace)
=>PYTHONTEX#py#default#defaultverb#8#verbatim#####1925#
pm.plot_posterior(trace)
=>PYTHONTEX#py#default#defaultverb#9#verbatim#####1957#
# posterior sampling
with single_patient_no_trend_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df[patient_index == 0],
    parameters_df=parameters_df[parameters_df["patient_index"] == 0],
    plot_name="single_patient_no_trend_posterior_sampling",
)
=>PYTHONTEX#py#default#defaultverb#10#verbatim#####2133#

patient_idx = measurements_df["patient_idx"]

with pm.Model() as hierarchical_model:

    # population priors
    pop_treatment1_mean_prior = pm.Normal(
        "pop_treatment1_mean", mu=10, sigma=10
    )
    pop_treatment1_sd_prior = pm.HalfCauchy("pop_treatment1_sd", beta=10)

    pop_treatment2_mean_prior = pm.Normal(
        "pop_treatment2_mean", mu=10, sigma=10
    )
    pop_treatment2_sd_prior = pm.HalfCauchy("pop_treatment2_sd", beta=10)

    pop_trend_mean_prior = pm.Normal("pop_trend_mean", mu=0.1, sigma=0.3)
    pop_trend_sd_prior = pm.HalfCauchy("pop_trend_sd", beta=2)

    pop_measurement_error_prior = pm.HalfCauchy(
        "pop_measurement_error", beta=10
    )

    # separate parameter for each patient
    pat_treatment1 = pm.Normal(
        "treatment1",
        mu=pop_treatment1_mean_prior,
        sigma=pop_treatment1_sd_prior,
        shape=patients_n,
    )
    pat_treatment2 = pm.Normal(
        "treatment2",
        mu=pop_treatment2_mean_prior,
        sigma=pop_treatment2_sd_prior,
        shape=patients_n,
    )
    pat_sigma = pm.HalfCauchy(
        "sigma", beta=pop_measurement_error_beta_prior, shape=patients_n,
    )
    pat_trend = pm.Normal(
        "trend",
        mu=pop_trend_mean_prior,
        sigma=pop_trend_sd_prior,
        shape=patients_n,
    )

    measurement_means = (
        pat_treatment1[patient_idx] * measurements_df["treatment1_idx"]
        + pat_treatment2[patient_idx] * measurements_df["treatment2_idx"]
        + pat_trend[patient_idx] * measurements_df["measurement_idx"]
    )

    likelihood = pm.Normal(
        "y",
        measurement_means,
        sigma=patients_sigma[patient_idx],
        observed=measurements_df["value"],
    )

    # adding the comparison between the treatments
    difference = pm.Deterministic('difference', pat_treatment1 - pat_treatment2)

    trace = pm.sample(800, tune=300, cores=3)

    pm.traceplot(
        trace,
        [
            "treatment1",
            "treatment2",
            "sigma",
            "trend",
            "pop_treatment1_mean",
            "pop_treatment1_sd",
            "pop_treatment2_mean",
            "pop_treatment2_sd",
            "pop_measurement_error_beta",
            "pop_trend_mean",
            "pop_trend_sd",
        ],
    )
    plt.show()
    pm.summary(trace)

    pm.plot_posterior(trace)
    plt.show()


# posterior sampling
with hierarchical_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df,
    parameters_df=parameters_df,
    plot_name="hierarchical_model_posterior_sampling",
)
=>PYTHONTEX#py#default#defaultverb#11#verbatim#####2237#

patient_idx = measurements_df["patient_idx"]

with pm.Model() as hierarchical_model:

    # population priors
    pop_treatment1_mean_prior = pm.Normal(
        "pop_treatment1_mean", mu=10, sigma=10
    )
    pop_treatment1_sd_prior = pm.HalfCauchy("pop_treatment1_sd", beta=10)

    pop_treatment2_mean_prior = pm.Normal(
        "pop_treatment2_mean", mu=10, sigma=10
    )
    pop_treatment2_sd_prior = pm.HalfCauchy("pop_treatment2_sd", beta=10)

    pop_trend_mean_prior = pm.Normal("pop_trend_mean", mu=0.1, sigma=0.3)
    pop_trend_sd_prior = pm.HalfCauchy("pop_trend_sd", beta=2)

    pop_measurement_error_beta_prior = pm.HalfCauchy(
        "pop_measurement_error_beta", beta=10
    )
=>PYTHONTEX#py#default#defaultverb#12#verbatim#####2274#
    pat_treatment1 = pm.Normal(
        "treatment1",
        mu=pop_treatment1_mean_prior,
        sigma=pop_treatment1_sd_prior,
        shape=6,
    )
    pat_treatment2 = pm.Normal(
        "treatment2",
        mu=pop_treatment2_mean_prior,
        sigma=pop_treatment2_sd_prior,
        shape=6,
    )
    pat_sigma = pm.HalfCauchy(
        "sigma", beta=pop_measurement_error_beta_prior, shape=6,
    )
    pat_trend = pm.Normal(
        "trend",
        mu=pop_trend_mean_prior,
        sigma=pop_trend_sd_prior,
        shape=6,
    )
=>PYTHONTEX#py#default#defaultverb#13#verbatim#####2313#
    measurement_means = (
        pat_treatment1[patient_idx] * measurements_df["treatment1"]
        + pat_treatment2[patient_idx] * measurements_df["treatment2"]
        + pat_trend[patient_idx] * measurements_df["measurement_idx"]
    )

    likelihood = pm.Normal(
        "y",
        measurement_means,
        sigma=patients_sigma[patient_idx],
        observed=measurements_df["measurement"],
    )
=>PYTHONTEX#py#default#defaultverb#14#verbatim#####2341#
    trace = pm.sample(800, tune=300, cores=3)
=>PYTHONTEX#py#default#defaultverb#15#verbatim#####2355#
    pm.traceplot(
        trace,
        [
            "pop_treatment1_mean",
            "pop_treatment1_sd",
            "pop_treatment2_mean",
            "pop_treatment2_sd",
            "pop_measurement_error_beta",
            "pop_trend_mean",
            "pop_trend_sd",
        ],
    )
    plt.show()

    pm.traceplot(
        trace,
        [
            "treatment1",
            "treatment2",
            "sigma",
            "trend",
        ],
    )
    plt.show()

    pm.summary(trace)
=>PYTHONTEX#py#default#defaultverb#16#verbatim#####2429#
    pm.plot_posterior(trace)
    plt.show()
=>PYTHONTEX#py#default#defaultverb#17#verbatim#####2437#
# posterior sampling
with hierarchical_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df,
    parameters_df=parameters_df,
    plot_name="hierarchical_model_posterior_sampling",
)
=>PYTHONTEX:SETTINGS#
version=0.17
outputdir=pythontex-files-Applying-Bayesian-Hierarchical-Models-to-N-of-1-Trials
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=false
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python3|
pygfamily=pycon|pycon|
pygfamily=sympy|python3|
pygfamily=sympycon|pycon|
pygfamily=pylab|python3|
pygfamily=pylabcon|pycon|
