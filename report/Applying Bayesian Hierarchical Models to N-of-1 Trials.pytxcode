=>PYTHONTEX#py#default#defaultverb#0#verbatim#####1656#
# load in needed packages
import pymc3 as pm
import pandas as pd

# load measurement data and true parameter values
measurements_df = pd.read_csv("patient_measurements.csv")
parameters_df = pd.read_csv("patient_parameters.csv")

# convenience variable for easier indexing
patient_idx = measurements_df["patient"]

# define the model
with pm.Model() as single_patient_no_trend_model:

    # defing our prior beliefs of the distributions of parameters
    treatment_a = pm.Normal("Treatment A", mu=10, sigma=1)
    treatment_b = pm.Normal("Treatment B", mu=10, sigma=1)
    trend = pm.Normal("Trend", mu=0.1, sigma=0.3)
    gamma = pm.HalfCauchy("Gamma", beta=1)

    # creating a vector definig the expected means of the observations
    measurement_means = (
        treatment_a * measurements_df[patient_idx == 0]["treatment_a"]
        + treatment_b * measurements_df[patient_idx == 0]["treatment_b"]
        + trend * measurements_df[patient_idx == 0]["measurement"]
    )

    # likelihood is normal distribution with the same amount of dimensions
    # as the patient has measurements and and the means are defined by one of the
    # treatment priors + trend with always the same variance
    likelihood = pm.Normal(
        "y",
        measurement_means,
        sigma=gamma,
        observed=measurements_df[patient_idx == 0]["value"],
    )

    # adding the comparison between the treatments
    difference = pm.Deterministic(
        "Treatment Difference (A-B)", treatment_a - treatment_b
    )

    # running the model
    trace = pm.sample(800, tune=500, cores=3)

    # Checking diagnostic describing how the MCMC method performed
    pm.traceplot(
        trace, ["Treatment A", "Treatment B", "Trend", "Gamma"], divergences="top"
    )
    plt.show()
    pm.summary(trace)

    # checking the posterior distributions
    pm.plot_posterior(trace)
    plt.show()


# posterior sampling
with single_patient_no_trend_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

# visualizing posterior samples to check model match with reality
draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df[patient_idx == 0],
    parameters_df=parameters_df[parameters_df["patient"] == 0],
)
=>PYTHONTEX#py#default#defaultverb#1#verbatim#####1730#
import pymc3 as pm
import pandas as pd

measurements_df = pd.read_csv("patient_measurements.csv")
parameters_df = pd.read_csv("patient_parameters.csv")

patient_idx = measurements_df["patient"]
=>PYTHONTEX#py#default#default#0#code#####1745#
import os
import pandas as pd

measurements_path = os.path.join("..", "data", "patient_measurements.csv")
measurements_df = pd.read_csv(measurements_path)
measurements_df.columns = ['patient', 'measurement', 'period', 'block',
'treatement_a', 'treatment_b', 'value']
print(measurements_df.head(10).to_latex(index=False))
=>PYTHONTEX#py#default#default#1#code#####1773#
import os
import pandas as pd

parameters_path = os.path.join("..", "data", "patient_parameters.csv")
parameters_df = pd.read_csv(parameters_path)
parameters_df.drop(columns=["treatment_order", 'autocorrelation'], inplace=True)
parameters_df.columns = ['patient', 'treatment_a', 'treatment_b', 'trend', 'measurement_error_sd']
print(parameters_df.to_latex(index=False))
=>PYTHONTEX#py#default#defaultverb#2#verbatim#####1791#
with pm.Model() as single_patient_no_trend_model:
=>PYTHONTEX#py#default#defaultverb#3#verbatim#####1805#
treatment_a = pm.Normal("Treatment A", mu=10, sigma=1)
treatment_b = pm.Normal("Treatment B", mu=10, sigma=1)
trend = pm.Normal("Trend", mu=0.1, sigma=0.3)
gamma = pm.HalfCauchy("Gamma", beta=1)
=>PYTHONTEX#py#default#defaultverb#4#verbatim#####1833#
measurement_means = (
    treatment_a
    * measurements_df[patient_idx == 0]["treatment_a"]
    + treatment_b
    * measurements_df[patient_idx == 0]["treatment_b"]
    + trend
    * measurements_df[patient_idx == 0]["measurement"]
)

likelihood = pm.Normal(
    "y",
    measurement_means,
    sigma=gamma,
    observed=measurements_df[patient_idx == 0]["value"],
)
=>PYTHONTEX#py#default#defaultverb#5#verbatim#####1876#
    difference = pm.Deterministic(
        "Treatment Difference (A-B)", treatment_a - treatment_b
    )
=>PYTHONTEX#py#default#defaultverb#6#verbatim#####1894#
trace = pm.sample(draw=800, tune=500, cores=3)
=>PYTHONTEX#py#default#defaultverb#7#verbatim#####1945#
# Checking diagnostic describing how the MCMC method performed
pm.traceplot(
        trace, ["Treatment A", "Treatment B", "Trend", "Gamma"], divergences="top"
    )
plt.show()
pm.summary(trace)
=>PYTHONTEX#py#default#defaultverb#8#verbatim#####2029#
pm.plot_posterior(trace)
=>PYTHONTEX#py#default#defaultverb#9#verbatim#####2059#
# posterior sampling
with single_patient_no_trend_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df[patient_idx == 0],
    parameters_df=parameters_df[parameters_df["patient_idx"] == 0],
    plot_name="single_patient_no_trend_posterior_sampling",
)
=>PYTHONTEX#py#default#defaultverb#10#verbatim#####2242#

patient_idx = measurements_df["patient_idx"]

with pm.Model() as hierarchical_model:

    # population priors
    pop_treatment_a_mean = pm.Normal(
        "Population Treatment A Mean", mu=10, sigma=1
    )
    pop_treatment_a_sd = pm.HalfCauchy("Population Treatment B Sd", beta=1)

    pop_treatment_b_mean = pm.Normal(
        "Population Treatment B Mean", mu=10, sigma=1
    )
    pop_treatment_b_sd = pm.HalfCauchy("Population Treatment B Sd", beta=1)

    pop_trend_mean = pm.Normal("Population Trend Mean", mu=0.1, sigma=0.3)
    pop_trend_sd = pm.HalfCauchy("Population Trend Sd", beta=2)

    pop_gamma = pm.HalfCauchy(
        "Population Gamma", beta=10
    )

    # separate parameter for each patient
    pat_treatment_a = pm.Normal(
        "Treatment A",
        mu=pop_treatment_a_mean,
        sigma=pop_treatment_a_sd,
        shape=6,
    )
    pat_treatment_b = pm.Normal(
        "Treatment B",
        mu=pop_treatment_b_mean,
        sigma=pop_treatment_b_sd,
        shape=6,
    )
    pat_gamma = pm.HalfCauchy(
        "Gamma", beta=pop_gamma, shape=6,
    )
    pat_trend = pm.Normal(
        "trend",
        mu=pop_trend_mean,
        sigma=pop_trend_sd,
        shape=6,
    )

    measurement_means = (
        pat_treatment_a[patient_idx] * measurements_df["treatment_a"]
        + pat_treatment_b[patient_idx] * measurements_df["treatment_a"]
        + pat_trend[patient_idx] * measurements_df["measurement"]
    )

    likelihood = pm.Normal(
        "y",
        measurement_means,
        sigma=pat_gamma[patient_idx],
        observed=measurements_df["value"],
    )

    # adding the comparison between the treatments
    pop_difference = pm.Deterministic(
        "Population Treatment Difference (A-B)",
        pop_treatment_a_mean - pop_treatment_b_mean,
    )
    pat_difference = pm.Deterministic(
        "Treatment Difference (A-B)", pat_treatment_a - pat_treatment_b
    )

    trace = pm.sample(800, tune=300, cores=3)

    # checking traceplots separately for population and patients
    pm.traceplot(
        trace,
        [
            "Population Treatment A Mean",
            "Population Treatment A Sd",
            "Population Treatment B Mean",
            "Population Treatment B Sd",
            "Population Trend Mean",
            "Population Trend SD",
            "Population Gamma",
        ],
    )
    plt.show()
    pm.traceplot(
        trace, ["Treatment A", "Treatment B", "Trend", "Gamma"],
    )
    plt.show()
    pm.summary(trace)

    # plotting selected posteriors
    pm.plot_posterior(
        trace,
        [
            "Population Treatment A Mean",
            "Population Treatment B Mean",
            "Population Trend Mean",
            "Population Gamma",
            "Population Treatment Difference (A-B)",
        ],
    )
    plt.show()


# posterior sampling
with hierarchical_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df,
    parameters_df=parameters_df,
    plot_name="hierarchical_model_posterior_sampling",
)
=>PYTHONTEX#py#default#defaultverb#11#verbatim#####2363#
with pm.Model() as hierarchical_model:

    pop_treatment_a_mean = pm.Normal(
        "Population Treatment A Mean", mu=10, sigma=1
    )
    pop_treatment_a_sd = pm.HalfCauchy("Population Treatment B Sd", beta=1)

    pop_treatment_b_mean = pm.Normal(
        "Population Treatment B Mean", mu=10, sigma=1
    )
    pop_treatment_b_sd = pm.HalfCauchy("Population Treatment B Sd", beta=1)

    pop_trend_mean = pm.Normal("Population Trend Mean", mu=0.1, sigma=0.3)
    pop_trend_sd = pm.HalfCauchy("Population Trend Sd", beta=2)

    pop_gamma = pm.HalfCauchy(
        "Population Gamma", beta=10
    )
=>PYTHONTEX#py#default#defaultverb#12#verbatim#####2396#
    pat_treatment_a = pm.Normal(
        "Treatment A",
        mu=pop_treatment_a_mean,
        sigma=pop_treatment_a_sd,
        shape=6,
    )
    pat_treatment_b = pm.Normal(
        "Treatment B",
        mu=pop_treatment_b_mean,
        sigma=pop_treatment_b_sd,
        shape=6,
    )
    pat_gamma = pm.HalfCauchy(
        "Gamma", beta=pop_gamma, shape=6,
    )
    pat_trend = pm.Normal(
        "trend",
        mu=pop_trend_mean,
        sigma=pop_trend_sd,
        shape=6,
    )
=>PYTHONTEX#py#default#defaultverb#13#verbatim#####2435#
    measurement_means = (
        pat_treatment_a[patient_idx] * measurements_df["treatment_a"]
        + pat_treatment_b[patient_idx] * measurements_df["treatment_b"]
        + pat_trend[patient_idx] * measurements_df["measurement"]
    )

    likelihood = pm.Normal(
        "y",
        measurement_means,
        sigma=pat_gamma[patient_idx],
        observed=measurements_df["value"],
    )
=>PYTHONTEX#py#default#defaultverb#14#verbatim#####2463#
    trace = pm.sample(800, tune=300, cores=3)
=>PYTHONTEX#py#default#defaultverb#15#verbatim#####2477#
    pm.traceplot(
        trace,
        [
            "Population Treatment A Mean",
            "Population Treatment A Sd",
            "Population Treatment B Mean",
            "Population Treatment B Sd",
            "Population Trend Mean",
            "Population Trend SD",
            "Population Gamma",
        ],
    )
    plt.show()
    pm.traceplot(
        trace, ["Treatment A", "Treatment B", "Trend", "Gamma"],
    )
    plt.show()
    pm.summary(trace)
=>PYTHONTEX#py#default#defaultverb#16#verbatim#####2551#
    pm.plot_posterior(
        trace,
        [
            "Population Treatment A Mean",
            "Population Treatment B Mean",
            "Population Trend Mean",
            "Population Gamma",
            "Population Treatment Difference (A-B)",
        ],
    )
    plt.show()
    pm.plot_posterior(
        trace, ["Treatment A", "Treatment B", "Trend", "Treatment Difference (A-B)"]
    )
    pm.plot_posterior(trace)
    plt.show()
=>PYTHONTEX#py#default#defaultverb#17#verbatim#####2601#
with hierarchical_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df,
    parameters_df=parameters_df,
    plot_name="hierarchical_model_posterior_sampling",
)
=>PYTHONTEX:SETTINGS#
version=0.17
outputdir=pythontex-files-Applying-Bayesian-Hierarchical-Models-to-N-of-1-Trials
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=false
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python3|
pygfamily=pycon|pycon|
pygfamily=sympy|python3|
pygfamily=sympycon|pycon|
pygfamily=pylab|python3|
pygfamily=pylabcon|pycon|
