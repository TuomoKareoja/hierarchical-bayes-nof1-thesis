=>PYTHONTEX#py#default#defaultverb#0#verbatim#####1531#
import pymc3 as pm
import pandas as pd

measurements_df = pd.read_csv("patient_measurements.csv")

with pm.Model() as single_patient_no_trend_model:

    # separate priors for each treatment
    treatment1_prior = pm.Normal("treatment1", mu=10, sigma=10)
    treatment2_prior = pm.Normal("treatment2", mu=10, sigma=10)
    # common variance parameter defining the error
    gamma_prior = pm.HalfCauchy("gamma", beta=10)

    # measurements are created from both priors, with a indicator setting the
    # values to 0 if the particular treatment is not applied at the observation
    measurement_est = (
        treatment1_prior
        * measurements_df[patient == 0]["treatment1"]
        + treatment2_prior
        * measurements_df[patient == 0]["treatment2"]
    )

    # likelihood is normal distribution with the same amount of dimensions
    # as the patient has measurements and and the mean is defined by either
    # the treatment 1 prior or treatment 2 prior with the same sigma
    likelihood = pm.Normal(
        "y",
        measurement_est,
        sigma=gamma_prior,
        observed=measurements_df[patient == 0]["measurement"],
    )

    # running the model
    trace = pm.sample(800, tune=400, cores=3)

    # Checking diagnostic describing how the MCMC method performed
    pm.traceplot(trace, ["treatment1", "treatment2", "gamma"])
    plt.show()
    pm.summary(trace)

    # checking the posterior distribution
    pm.plot_posterior(trace)
    plt.show()


# posterior sampling
with single_patient_no_trend_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df[patient == 0],
    parameters_df=parameters_df[parameters_df["patient"] == 0],
)
=>PYTHONTEX#py#default#defaultverb#1#verbatim#####1592#
import pymc3 as pm
import pandas

measurements_df = pd.read_csv("patient_measurements.csv")
=>PYTHONTEX#py#default#default#0#code#####1604#
import os
import pandas as pd

measurements_path = os.path.join("..", "data", "patient_measurements.csv")
measurements_df = pd.read_csv(measurements_path)
measurements_df.columns = ['patient', 'measurement', 'period', 'block',
'treatement1', 'treatment2', 'measurement']
print(measurements_df.head(10).to_latex(index=False))
=>PYTHONTEX#py#default#defaultverb#2#verbatim#####1628#
with pm.Model() as single_patient_no_trend_model:
=>PYTHONTEX#py#default#defaultverb#3#verbatim#####1642#
treatment1_prior = pm.Normal("treatment1", mu=10, sigma=10)
treatment2_prior = pm.Normal("treatment2", mu=10, sigma=10)
gamma_prior = pm.HalfCauchy("gamma", beta=10)
=>PYTHONTEX#py#default#defaultverb#4#verbatim#####1671#
measurement_est = (
    treatment1_prior
    * measurements_df[patient == 0]["treatment1"]
    + treatment2_prior
    * measurements_df[patient == 0]["treatment2"]
)

likelihood = pm.Normal(
    "y",
    measurement_est,
    sigma=gamma_prior,
    observed=measurements_df[patient == 0]["measurement"],
)
=>PYTHONTEX#py#default#defaultverb#5#verbatim#####1697#

trace = pm.sample(800, tune=400, cores=3)

=>PYTHONTEX#py#default#defaultverb#6#verbatim#####1705#

# Checking diagnostic describing how the MCMC method performed
pm.traceplot(trace, ["treatment1", "treatment2", "sigma"])
plt.show()
pm.summary(trace)

# checking the posterior distribution
pm.plot_posterior(trace)
plt.show()

=>PYTHONTEX#py#default#defaultverb#7#verbatim#####1719#

# posterior sampling
with single_patient_no_trend_model as model:
    post_pred = pm.sample_posterior_predictive(trace, samples=500)
    predictions = post_pred["y"]

draw_posterior_checks(
    predictions=predictions,
    measurements_df=measurements_df[patient_index == 0],
    parameters_df=parameters_df[parameters_df["patient_index"] == 0],
    plot_name="single_patient_no_trend_posterior_sampling",
)

=>PYTHONTEX:SETTINGS#
version=0.17
outputdir=pythontex-files-Applying-Bayesian-Hierarchical-Models-to-N-of-1-Trials
workingdir=.
workingdirset=false
gobble=none
rerun=default
hashdependencies=default
makestderr=false
stderrfilename=full
keeptemps=none
pyfuture=default
pyconfuture=none
pygments=true
pygglobal=:GLOBAL||
fvextfile=-1
pyconbanner=none
pyconfilename=stdin
depythontex=false
pygfamily=py|python3|
pygfamily=pycon|pycon|
pygfamily=sympy|python3|
pygfamily=sympycon|pycon|
pygfamily=pylab|python3|
pygfamily=pylabcon|pycon|
